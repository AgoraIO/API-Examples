# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

parameters:
  displayName: ''
  workingDirectory: ''
  scheme: ''  
  sdkVersion: ''
  faceUnitySDKVersion: ''
  Machine: ''
  solutionName: ''
  release: ''
jobs:
  - job: ${{ parameters.displayName }}Build
    displayName: ${{ parameters.displayName }}

    pool:
      vmImage: 'vs2017-win2016'

    variables:
      solution: '${{ parameters.workingDirectory }}/${{ parameters.solutionName }}'
      buildPlatform: '${{ parameters.Machine }}'
      buildConfiguration: 'Release'
      WindowsRTCSDK: 'https://download.agora.io/sdk/release/Agora_Native_SDK_for_Windows_v${{ parameters.sdkVersion }}_FULL.zip'
      sdkunzipPath: 'AgoraSDK/Agora_Native_SDK_for_Windows_FULL'
    steps:
      - script: echo "${{ parameters.sdkurl }}" && ls
      #AgoraSDK
      - powershell: Windows/cicd/script/downloadsdk1.ps1 "$(WindowsRTCSDK)" "AgoraSDK.zip"
         
      - task: ExtractFiles@1
        inputs:
          archiveFilePatterns: 'AgoraSDK.zip' 
          destinationFolder: 'AgoraSDK'    

      - script: ls
          
      - task: CopyFiles@2
        inputs:
          sourceFolder: $(sdkunzipPath)/libs
          targetFolder: ${{ parameters.workingDirectory }}/libs

      - script: cd ${{ parameters.workingDirectory }} && ls
      - script: ls       
      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          vsVersion: '15.0'
          msbuildArchitecture: '${{ parameters.Machine }}'
   
      - task: ArchiveFiles@1
        inputs:
          rootFolderOrFile: '${{ parameters.workingDirectory }}/${{ parameters.release }}/'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: ${{ parameters.workingDirectory }}/${{ parameters.displayName }}.zip
          replaceExistingArchive: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: ${{ parameters.workingDirectory }}/${{ parameters.displayName }}.zip
          ArtifactName: ${{ parameters.displayName }}
      
